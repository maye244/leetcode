/*
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.

Example 1:
Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:
Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
*/
//first method
class Solution {
    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i<board.length; i++){
            HashSet<Character> rows = new HashSet<>();
            HashSet<Character> cols = new HashSet<>();
            HashSet<Character> cubes = new HashSet<>();
            for (int j = 0; j<board[0].length; j++){
                if (board[i][j] != '.' && !rows.add(board[i][j])){
                    return false;
                }
                if (board[j][i] != '.' && !cols.add(board[j][i])){
                    return false;
                }
                int rowCube = 3 * (i/3);
                int colCube = 3 * (i%3);
                if (board[rowCube+j/3][colCube+j%3] != '.' && !cubes.add(board[rowCube+j/3][colCube+j%3])){
                    return false;
                }
            }
        }
        return true;
    }
}

//second method
class Solution {
    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i <board.length; i++){
            for (int j = 0; j <board.length; j++){
                if (board[i][j]=='.'){
                    continue;
                }
                if (!valid(board, i, j)){
                    return false;
                }
            }
        }
        return true;
    }

    public boolean valid(char[][]board, int i, int j){
        for (int row = 0; row <board.length; row++){
            if (row == i){
                continue;
            }
            if (board[row][j] == board[i][j]){
                return false;
            }
        }
        for (int col = 0; col <board[0].length; col++){
            if (col == j){
                continue;
            }
            if (board[i][col] == board[i][j]){
                return false;
            }
        }
        for (int row = 3*(i/3); row < 3*(i/3+1); row++){
            for (int col = 3*(j/3); col < 3*(j/3+1); col++){
                if (row == i && col == j){
                    continue;
                }
                if (board[row][col] == board[i][j]){
                    return false;
                }
            }    
        }
        return true;
    }
}
