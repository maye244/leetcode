/*
Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6

Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
*/

class Solution {
    public int maxSubArray(int[] nums) {
        int[] subarry = new int[nums.length];
        subarry[0] = nums[0];
        int result = nums[0];
        for(int i=1; i<nums.length; i++){
            if(subarry[i-1]>0){
                subarry[i] = nums[i] + subarry[i-1];
            }
            else{
                subarry[i] = nums[i] + 0;
            }
            result = Math.max(result, subarry[i]);
            
        }
        return result;
    }
}

class Solution {
    public int maxSubArray(int[] nums) {
        int sum = nums[0];
        int result = nums[0];
        for(int i=1; i<nums.length; i++){
            sum = Math.max(nums[i], sum + nums[i]);
            result = Math.max(result, sum);           
        }
        return result;
    }
}
